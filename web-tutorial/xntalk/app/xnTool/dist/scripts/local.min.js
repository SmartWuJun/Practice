/**
 * Created by DEV005 on 2016/3/31.
 */



    'use strict';

    /*------------工具函数------------*/
    /*
     * 读取指定文件夹下的全部文件，可通过正则进行过滤，返回文件路径数组
     * @param root 指定文件夹路径
     *
     * 注：还可变形用于文件路径是否符合正则规则，路径可以是文件夹，也可以是文件，对不存在的路径也做了容错处理*/

    /**
     * 读取文件
     *
     */
    var fs = require('fs');
    var path = require('path');
    //加载electron 里的 remote
    const electron = require('electron');
    var remote =  require('electron').remote;
    var app =  electron.app;
    const ipcRenderer = electron.ipcRenderer;



    function mainController($scope,$timeout,$location,templateService,dialogService){
        $location.path('/');
        // 自动获取目录

        


        $scope.file={};
        $scope.typeList=[
            {key:"String",val:"String"},
            {key:"Id",val:"Id"},
            {key:"DateTime",val:"DateTime"},
            {key:"Data",val:"Data"},
            {key:"Integer",val:"Integer"},
            {key:"Decimal",val:"Decimal"},
            {key:"Amount",val:"Amount"},
            {key:"Boolean",val:"Boolean"},
            {key:"Text",val:"Text"},
            {key:"Date",val:"Date"}
        ];
        $scope.relateList=[
            {key:"FK",val:"FK"},
            {key:"Enum",val:"Enum"}
        ];

        //返回
        $scope.backMain=function(){
            window.location.href =remote.getGlobal('dirname')+"/xnLayout/page/main.html";
        };
        //退出
        $scope.exit=function(){
            ipcRenderer.sendSync('message', 'close');
        };

        //读取目录
        $scope.openDirectory=function(){

            ipcRenderer.send('selectDirectory');
        };
        /*返回读取目录*/
        ipcRenderer.on('savedDirectory', function (event, path) {
            var directory=path;
            if(directory){
                //判断与配置文件是否相同
                if(templateService.getConfig("fileUrl")!=directory){
                    $scope.$broadcast('childDirectory',directory[0]);
                    $location.path('/');
                    templateService.setConfig("fileUrl",directory[0])
                }
            }
        });

        //存储目录
        $scope.saveDialog=function(){
            ipcRenderer.send('saveTemplate');
        };
        /*返回保存内容*/
        ipcRenderer.on('savedTemplate', function (event, path) {
            templateService.setConfig("outputUrl",path[0])
        });


        //监听事件 目录到页面
        $scope.$on('parentFile', function(e,file){
            if($location.path()=='/'+file.type){
                $scope.$broadcast('childFile', file);
            }else {
                if("folder"==file.type){
                    $location.path("/folder");

                }else if("file"==file.type){
                    $location.path("/file");
                }
                $timeout(function () {
                    $scope.$broadcast('childFile', file);
                },350);
            }
        });

        //监听事件 判断是文件还是文件夹  目录到页面
        $scope.$on('parentFileUrl', function(e,file){
            $scope.file=file;
            $timeout(function () {
                $scope.$broadcast('fileUrl',file);
            },350);

        });

        //重命名  页面到目录
        $scope.$on('parentRename', function(e,file){
            $scope.$broadcast('childRename',file);
        });

        //删除 页面到目录
        $scope.$on('parentDelete', function(e,file){
            $scope.$broadcast('childDelete',file);
        });

        //添加子  页面到目录
        $scope.$on('parentAdd', function(e,file){
            $scope.$broadcast('childAdd',file);
        });




        //点击判断是否文件夹，及读取文件
        $scope.rightMenu={
            state:false,
            style:{}
        };
        //判断点击事件
        function rename(){
        }
        //增加文件
        function addFile(){

        }
        //增加文件文件夹
        function addFolder(){

        }

        /**
         * 右击处理*/
        //右击  页面到目录
        var rightFile='';
        $scope.$on('rightFile', function(e,file){
            rightFile=file;
        });

        $scope.clickMemu=function(name){
            $scope.rightMenu.state=false;
            switch (name){
                case "addFile":
                    break;
                case "addFolder":
                    break;
                case "delete":
                    break;
                case "template":
                    templateService.outputTemplate(rightFile);
                    break;
            }
        }
    };


    function  appMenu($scope,templateService,dialogService){


        // 模板文件的读取规则
        var reg = /\.t$/ ;

        $scope.xnMenu=[];
        // 树目录
        $scope.expandedNodes = [];


        function createTree(path){
            var xnMenu=[
                {
                    name:templateService.readPath(path),
                    layer:"0",
                    type : "folder",
                    path : path,
                    rPath:"",
                    children : [],
                    parent:""
                }
            ];
            templateService.readAllFile(xnMenu[0],reg);

            $scope.xnMenu=xnMenu;

            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
                $scope.$apply();
            }

            $scope.expandedNodes = [$scope.xnMenu[0]];
        }
        //增加文件
        $scope.$on('childDirectory', function(e,path){
            createTree(path)
        });

        /*自动获取生成目录*/
        function getDirectory() {
            var directory=templateService.getConfig("fileUrl");
            if(directory){
                createTree(directory);
            }
        }
        getDirectory();
        var fileItem={};
        //目录选择文件
        $scope.showSelected=function(item,$event){
            fileItem=item;
            //传递 文件路径
            $scope.$emit('parentFileUrl', item);

            if($event.button=="2"){
                // 右击事件
                $scope.rightMenu.state=true;
                $scope.rightMenu.style={
                   "top":($event.clientY+10)+"px",
                   "left":$event.clientX+"px"
                };
                $scope.$emit('rightFile', item);
            }else {
                $scope.rightMenu.state=false;
                /*选择文件 在页面中读取*/
                $scope.$emit('parentFile', item);
            }

        };

        function renameFolder(node){
            if(node.children && node.children.length>0){
                angular.forEach(node.children,function(item){
                    item.path=node.path+"/"+item.name;
                    renameFolder(item);
                })
            }
        }
        //重命名
        $scope.$on('childRename', function(e,newFile){
            console.log(newFile);
            fileItem.name=newFile.name;
            fileItem.path=newFile.path;

            if(newFile.type=="folder"){
                renameFolder(fileItem);
            }
        });

        //删除
        $scope.$on('childDelete', function(e,file){
            for(var i=0;i<file.parent.children.length;i++){
                if(file.parent.children[i].name==file.name){
                    file.parent.children.splice(i,1);
                }
            }
        });

        //增加文件
        $scope.$on('childAdd', function(e,file){
            fileItem.children.push(file);
        });
    }

    var ref=[
        "ui.router",
        "ngMaterial",
        "ngAnimate",
        "app.service",
        "app.directive",
        "app.filter",
        "ui.bootstrap",
        "treeControl",
        "app.template",
        "ng-context-menu",
        "angular-sortable-view"
    ];

    var app=angular.module('app',ref);
    app.controller('MainController', ["$scope","$timeout","$location","templateService","dialogService",mainController])
        .controller("AppMenuController",["$scope","templateService","dialogService",appMenu]);







/**
 * Created by DEV005 on 2017/7/31.
 */

angular.module('app.directive',[])
.directive("xnInputRegex",["$timeout", function() {
    return {
        restrict:"AE",
        replace:"true",
        scope:{
            ngModel:"=ngModel"
        },
        required: "?ngModel",
        link: function( scope,element, attrs, ngModel){
            var vm={
                regexFirst:new RegExp(attrs.regexFirst),
                regexOther:new RegExp(attrs.regexOther,"g"),
                convert:attrs.convert,   //   lower 小写   upper //大写
                min:attrs.min,
                max:attrs.max
            };

            //
            //

            //匹配起始位置
            function  regexFirst(val){
                if(val.length){
                    return val.replace(vm.regexFirst,'')
                }else {
                    return val;
                }
            }
            //匹配中间位置
            function  regexOther(val){
                if(val.length){
                    return val.replace(vm.regexOther,'')
                }else {
                    return val;
                }
            }

            /**
             *
             * @param val  // //   lower 小写   upper //大写
             */
            function convert(val){
                if(val.length){
                    switch (vm.convert){
                        case "lower":
                            return val.toLowerCase ;
                            break;
                        case "upper":
                            return val.toUpperCase();
                            break;
                        default:
                            return val;
                            break;
                    }
                }else {
                    return val;
                }
            }
            /**
             *
             * 最大值
             */
            function max(val){
                if(val!=undefined || val!=null||  val!=""){
                    if(Number(val)>vm.max){
                        return vm.max;
                    }else {
                        return val;
                    }
                }else {
                    return val;
                }
            }

            function min(val){
                if(val!=undefined || val!=null||  val!=""){
                    if(Number(val)<Number(vm.min)){
                        return Number(vm.min);
                    }else {
                        return val;
                    }
                }else {
                    return val;
                }
            }


            element.on("blur",function(){
                var data=scope.ngModel;

                if(data.length ){
                    //大小写限制转换
                    if(vm.convert){
                        data=convert(data);
                    }
                    //首字母限制
                    if(vm.regexFirst){
                        data=regexFirst(data);
                    }
                    //其他地方限制
                    if(vm.regexOther){
                        data=regexOther(data);
                    }
                    if(vm.max){
                        data=max(data);
                    }
                    if(vm.min){
                        data=min(data);
                    }
                    scope.$apply(function(){
                        scope.ngModel=data;
                    });
                }
            });

        }
    };
}])
.directive("xnInputCheckbox",["$timeout", function() {
    return {
        restrict:"AE",
        replace:"true",
        scope:{
            ngModel:"=ngModel"
        },
        required: "?ngModel",
        link: function( scope,element, attrs, ngModel){
            console.log(scope.ngModel);
            if(scope.ngModel=="true"){
                scope.ngModel=true;
            }else if(scope.ngModel=="false"){
                scope.ngModel==false;
            }else if(scope.ngModel=="") {
                scope.ngModel==false;
            }

            scope.$watch(function(){
                return scope.ngModel;
            },function(newadata){
                if(newadata=="true"){
                    scope.ngModel=true;
                }else if(newadata=="false"){
                    scope.ngModel==false;
                }else if(newadata=="") {
                    scope.ngModel==false;
                }
            })

        }
    };

}])
.directive("inputShortcuts", function() {
    return {
        restrict:"AE",
        replace:"true",
        scope:{
            ngModel:"=ngModel",
            method:"&",
            index:"@"
        },
        required: "?ngModel",
        link: function( scope,element, attrs, ngModel){
            var index=scope.index;
            element.on("keydown",function(event){
                if(event.keyCode==13){
                    if(scope.method) {
                        scope.$apply(function(){
                            scope.method();
                        })
                    }
                }
            });
        }
    };

});
(function () {
    "use strict";

    var getPostParameter = function (request ,app_key,secret) {
        //读取cookies
        function readCookie(name) {
            var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)");
            if(arr=document.cookie.match(reg)){
                return unescape(arr[2]);
            }else{
                return null;
            }
        }
        //300017
        var app_key = app_key; //dev
        var secret = secret; //dev
        var post_data = '';
        var param_array = new Object();
        var session = readCookie('xn_session')||0;

        if(session != undefined && session != null && session > 0)
        {
            param_array.session = session;
        }
        param_array.format='json';
        param_array.sign_method='md5';
        param_array.timestamp = Date.parse(new Date());
        param_array.app_key = app_key;
        param_array.v = '1.0';

        for ( var p in request ){ // 方法
            if ( request [ p ] != null && request [ p ] != undefined  &&  typeof ( request [ p ]) != "function" ){

                param_array[p] =  request [ p ];
            }
        }
        {
            var param_sign;
            var arrayKey = [];
            var strTemp;
            var arrayKeyTemp = [];
            for ( var p in param_array ){ // 方法
                if ( typeof ( param_array [ p ]) != "function"   ){
                    arrayKeyTemp.push(p);
                    // console.log(param_array [ p ] );
                }
            } // 最后显示所有的属性
            arrayKeyTemp.sort();
            var strTemp = secret;
            for(var i=0; i<arrayKeyTemp.length; i++)
            {
                if(angular.isArray( param_array[arrayKeyTemp[i]]))
                {
                    strTemp = strTemp  + arrayKeyTemp[i] +   JSON.stringify( param_array[arrayKeyTemp[i]] )   ;
                }
                else
                {

                    strTemp = strTemp  + arrayKeyTemp[i] +      param_array[arrayKeyTemp[i]]  ;
                }

            }
            strTemp = strTemp + secret;

            param_sign =  MD5(strTemp).toUpperCase();

            post_data = 'sign=' + param_sign.toUpperCase();
            for(var i=0; i<arrayKeyTemp.length; i++)
            {
                if(angular.isArray( param_array[arrayKeyTemp[i]]))
                {
                    post_data =  post_data  +  '&' +  arrayKeyTemp[i] + '=' + encodeURI(JSON.stringify( param_array[arrayKeyTemp[i]] ))  ;
                }
                else
                {
                    post_data =  post_data  +  '&' +  arrayKeyTemp[i] + '=' + encodeURI(param_array[arrayKeyTemp[i]])  ;
                }

            }

        }

        var post_url;
        if(require('electron').remote.getGlobal('isDev') != true){
            post_url = 'https://xntalk-api.xiniunet.com/router?';
        }else{
            post_url = 'https://xntalk-api-dev.xiniunet.com/router?';
            //  post_url = 'http://127.0.0.1:8088/router?';
        }

        var returnValue = {};
        returnValue.url = post_url;
        returnValue.data = post_data;
        return returnValue;
    };
    angular.module("app.filter", [])
        .config(['$httpProvider',
            function ($httpProvider) {
                $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
                $httpProvider.defaults.withCredentials=true;
                $httpProvider.defaults.useXDomain = true;
            }])
        .factory('talkService', ['$http', function ($http) {
            var url =require('electron').remote.getGlobal('serveUrl');
            var app_key =require('electron').remote.getGlobal('app_key');
            var secret =require('electron').remote.getGlobal('secret');

            var service = {};

            //登陆接口
            /**
             * account
             * deviceId
             * ip
             * @param data
             * @returns {*}
             */
            service.login = function (data) {
                data.method="xntalk.login";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };


            /**
             * 获取用户登陆者
             * id
             * @param data
             * @returns {*}
             */
            service.xnTalkUnionGet = function (data) {
                data.method="xntalk.union.get";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };

            /**
             * identityId
             *  unionId
             * @param data
             * @returns {*}
             */
            service.xnTalkScanLoginCreate = function (data) {
                data.method="xntalk.scanLogin.create";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };

            /**
             * id
             * @param data
             * @returns {*}
             */
            service.xnTalkScanLoginGetCreate = function (data) {
                data.method="xntalk.scanLogin.get";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };

            /**
             * account
             * isAllUnion
             * @param data
             * @returns {*}
             */
            service.xnTalkScanLoginGetCreate = function (data) {
                data.method="xntalk.unionByAccount.get";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };
            /**
             * keyword
             * @param data
             * @returns {*}
             */
            service.xnTalkGlobalSearch = function (data) {
                data.method="xntalk.global.search";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };
            /**
             * tenantId
             * @param data
             * @returns {*}
             */
            service.xnTalkPassportIdByUnionIdAndTenantIdGet = function (data) {
                data.method="xntalk.passportIdByUnionIdAndTenantId.get";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };
            /**
             * userId
             * unionId
             * tenantId
             * @param data
             * @returns {*}
             */
            service.xnTalkAllTenantListGet = function (data) {
                data.method="xntalk.allTenantList.get";
                var postP = getPostParameter(data,app_key,secret);
                return $http({
                    method: 'POST',
                    url: url,
                    data: postP.data
                });
            };

            return service;
        }])
})();
/**
 * Created by DEV005 on 2016/4/20.
 */
(function () {
    "use strict";
        angular.module('app.service',[])
            .run(["$templateCache", function($templateCache) {
                "use strict";
                $templateCache.put("xn/template/dialog/confirm.html",
                    "<div class=\"modal-header\">\n" +
                    "    <h3>{{dialogOptions.headerText}}</h3>\n" +
                    "    <div class=\"xn-close xn-cursor\" data-ng-click=\"dialogOptions.close()\">\n" +
                    "        <i class=\"icon icon-delete\"></i>\n" +
                    "    </div>\n" +
                    " </div>\n" +
                    "    <div class=\"modal-body\" ng-if=\"dialogOptions.type!='delete'\">\n" +
                    "        <p>{{dialogOptions.bodyText}}</p>\n" +
                    "    </div>\n" +
                    "    <div class=\"modal-body\" ng-if=\"dialogOptions.type=='delete'\">\n" +
                    "        <div class=\"xn-exclamation\"><span>!</span></div>\n" +
                    "        <div class=\"xn-body-text\">\n" +
                    "            <h4>{{dialogOptions.bodyText}}</h4>\n" +
                    "            <p></p>\n" +
                    "        </div>\n" +
                    "    </div>\n" +
                    "<div class=\"modal-footer\">\n" +
                    "   <button type=\"button\"class=\"btn\"\n" +
                    "   data-ng-click=\"dialogOptions.cancel()\">{{dialogOptions.closeButtonText}}\n" +
                    "    </button>\n" +
                    "   <button class=\"btn btn-danger\"\n" +
                    "   data-ng-click=\"dialogOptions.callback();\">{{dialogOptions.actionButtonText}}\n" +
                    "     </button>\n" +
                    " </div>");

            }])
        .service("dialogService",["$modal","$timeout","$document",
            function ($modal,$timeout,$document) {
                "use strict";

                this.confirm = function (customDialogDefaults, customDialogOptions) {
                    var dialogDefaults = {
                        backdrop: true,
                        keyboard: true,
                        backdropClick: true,
                        dialogFade: true,
                        templateUrl: "xn/template/dialog/confirm.html",
                        size:"sm"
                    };

                    var dialogOptions = {
                        closeButtonText: "关闭",
                        actionButtonText: "确定",
                        headerText: "继续...?",
                        bodyText: "执行这个操作?"
                    };
                    //Create temp objects to work with since we're in a singleton service
                    var tempDialogDefaults = {};
                    var tempDialogOptions = {};

                    //Map angular-ui dialog custom defaults to dialog defaults defined in this service
                    angular.extend(tempDialogDefaults, dialogDefaults, customDialogDefaults);

                    //Map dialog.html $scope custom properties to defaults defined in this service
                    angular.extend(tempDialogOptions, dialogOptions, customDialogOptions);

                    if (!tempDialogDefaults.controller) {
                        tempDialogDefaults.controller =["$scope","$modalInstance", function ($scope,  $modalInstance) {
                            $scope.dialogOptions = tempDialogOptions;
                            $scope.dialogOptions.close = function (result) {
                                $modalInstance.close(result);
                            };

                            $scope.dialogOptions.cancel = function () {
                                $modalInstance.close();
                                if(customDialogOptions.cancel){
                                    customDialogOptions.cancel();
                                }
                            };

                            $scope.dialogOptions.callback = function () {
                                $modalInstance.close();
                                customDialogOptions.callback();
                            };
                        }];
                    }

                    $modal.open(tempDialogDefaults);

                };

                this.tip=function(message, modalUrl,time){
                    var dialogDefaults = {
                        headerText:"信息提示",
                        bodyText:message,
                        show:"show",
                        size:"sm",
                        top:"30%",
                        removeTime:1000,
                        stopTime:3000
                    };
                    var  tipbox="";
                    var  errorDump="";

                    if(time != null){
                        dialogDefaults.stopTime = time;
                    }

                    var modalId="modal"+new Date().getTime();

                    for( var i=0;i < dialogDefaults.bodyText.length;i++ ){
                        if(dialogDefaults.bodyText[i].type!="STACK_DUMP"){
                            tipbox += "<p><span>"+(i+1)+".</span>"+dialogDefaults.bodyText[i].message+"</p>\n";
                        }else{
                            errorDump += dialogDefaults.bodyText[i].message;
                        }
                    }

                    var tip="<div id='"+modalId+"' class=\"modal ng-isolate-scope xn-modal xn-modal-sm\" >\n"+
                        "<div class=\"modal-content \">\n"+
                        "<div class=\"modal-header\">\n"+
                        " <h3>"+dialogDefaults.headerText+"</h3>\n" +
                        " </div>\n" +
                        "<div class=\"modal-body\">\n" +
                        tipbox+
                        "</div>";

                    if(errorDump!=""){
                        errorDump = escape(errorDump);
                        tip +="<form action='/api/errorHandler.do' method='post' target='_blank'>" +
                            "<div class=\"modal-foot xn-text-right xn-padding-bottom xn-padding-right\">" +
                            "<input type='submit' value='更多' class='btn btn-link' />" +
                            "<input type='hidden' name='error' value='" + errorDump + "' />" +
                            "</div></form>" ;
                    }

                    //消息明细获取
                    var body = $document.find("body").eq(0);
                    body.append(tip);


                    var  remove=function(){

                        document.getElementById(modalId).parentNode.removeChild(document.getElementById(modalId));
                        if( !(modalUrl==undefined || modalUrl==null)){
                            window.location = modalUrl;
                        }
                    };

                    var closeModal=function(){
                        $timeout(remove ,dialogDefaults.removeTime);
                    };

                    (function timeout (){
                        console.log(1111);
                        $timeout(closeModal,dialogDefaults.stopTime);
                    })();

                };

            }
        ])
        .factory('myService', function() {
            
        });
})();
(function () {

    angular.module('app')
        .run(['$rootScope','$window', '$location', '$log',function ($rootScope, $window, $location, $log) {

            $rootScope.routeChange=false;

            //路由开始切换
            /**
             * args[0]: 事件
             * args[1]: 要切换的路由
             * args[2]: 第一次进入该方法,没有当前路由,为undefined
             */
            $rootScope.$on('$routeChangeStart',function (event,next,current) {
                console.log([event,next,current]);
            });

            //路由切换成功
            /**
             * args[0]: 事件
             * args[1]: 当前的路由
             * args[2]: 上一个路由,第一次进入该方法,没有上一个路由,为undefined
             */
            $rootScope.$on('$routeChangeSuccess',function (event,current,previous) {
                console.log('$routeChangeSuccess');
                console.log([event,current,previous]);
            });

            //路由切换失败(比如resolve中有错误等待),都会导致路由切换失败
            $rootScope.$on('$routeChangeError',function (event,msg) {
                console.log([event,msg]);
            });

            //当$location.path发生变化或者$location.url发生变化时触发
            $rootScope.$on('$locationChangeStart',function (event,msg) {
                $rootScope.routeChange=true;
                console.log([event,msg]);
            });

            //当且仅当path或url变化成功后触发
            $rootScope.$on('$locationChangeSuccess',function (event,msg) {
                $rootScope.routeChange=false;
                console.log([event,msg]);
            });

        }])
        .config(["$stateProvider","$urlRouterProvider",function ($stateProvider, $urlRouterProvider) {
        // 定义一个当请求的路径是无效路径时跳转的路径。


        $stateProvider
            .state('/', {
                url: '/',
                templateUrl: 'page/main.html',
                controller: function () {
                    
                }
            })
            .state('file', {
                url: '/file',
                templateUrl: 'page/file/file.html',
                controller: "FileController"
            })
            .state('folder', {
                url: '/folder',
                templateUrl: 'page/folder/folder.html',
                controller: "FolderController"
            });

        $urlRouterProvider.otherwise('/');

    }])
})();



/**
 * Created by DEV005 on 2016/4/20.
 */
var fs = require("fs");
var Path = require('path');

var json2xml = require('xml2js');  /*转换*/
var parseString = json2xml.parseString;  /*转换*/
var Builder = json2xml.Builder;  /*转换*/
var ini = require('ini');    /*配置文件转换*/


var nunjucks=require("nunjucks");
var jucks = new nunjucks.Environment();

//小驼峰
jucks.addFilter('camelcase', function(str) {
    if(str){
        var arr=str.split("_");
        for(var i=0;i<arr.length;i++){
            if(0==i){
                arr[i]=arr[i].toLowerCase();
            }else {
                arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substring(1).toLowerCase();
            }

        }
        return arr.join("");
    }else {
        return ''
    }

});
//大驼峰
jucks.addFilter('pascalcase', function(str) {
    if(str){
        var arr=str.split("_");
        for(var i=0;i<arr.length;i++){
            arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substring(1).toLowerCase();
        };
        return arr.join("");
    }else {
        return ''
    }
});
jucks.addFilter('uppercase', function(str) {
    if(str){
        return str.toUpperCase();
    }else {
        return ''
    }

});

(function () {
    "use strict";
        angular.module('app.template',[])
        .factory('templateService', ["$timeout","dialogService",function($timeout,dialogService) {
            var config= ini.parse(fs.readFileSync(__dirname+"/config.ini",'utf-8'));
            var templatePathList={
                isRead:false,
                name:"目录",
                layer:"0",
                type : "folder",
                path :__dirname+config.templateUrl,
                rPath:"",
                children : [],
                parent:""
            };
            /*获取配置文件*/
            function getConfig(key){
                return config[key];
            }

            function setConfig(key,val){
                config[key]=val;
                fs.writeFileSync(__dirname+"/config.ini",ini.stringify(config));
            }


            /*读取文件目录*/
            function readAllFile(parent,reg){
                //判断路径是否存在
                if (fs.existsSync(parent.path)) {
                    //读取文件信息
                    var item = fs.lstatSync(parent.path);
                    //判断是否是文件夹
                    if(item.isDirectory()){
                        var files = fs.readdirSync(parent.path);
                        files.forEach(function (_file,index) {
                            var file = fs.lstatSync(parent.path + "/" + _file);
                            if(file.isDirectory()) {
                                var folder={
                                    type : "folder",
                                    path : parent.path+"/"+_file,
                                    rPath: parent.rPath+"/"+_file,
                                    children : [],
                                    name:_file,
                                    parent:parent
                                };
                                parent.children.push(folder);
                                readAllFile(folder,reg);
                            } else {
                                if(filterFile(parent.path + "/" + _file,reg)) {
                                    var obj={
                                        type : "file",
                                        path : parent.path+"/"+_file,
                                        rPath: parent.rPath+"/"+_file,
                                        name:_file,
                                        parent:parent
                                    };
                                    parent.children.push(obj);
                                }
                            }
                        });
                    }else {

                    }


                }
            }

            /**
             * 删除文件夹
             * @param path  路径
             */
            function deleteFolder(path) {
                var files = [];
                if( fs.existsSync(path) ) {
                    files = fs.readdirSync(path);
                    files.forEach(function(file,index){
                        var curPath = path + "/" + file;
                        if(fs.statSync(curPath).isDirectory()) { // recurse
                            deleteFolder(curPath);
                        } else { // delete file
                            fs.unlinkSync(curPath);
                        }
                    });
                    fs.rmdirSync(path);
                }
            };
            /**
             * 清空文件
             * @param path  路径
             */
            function clearFolder(path,state) {
                var files = [];
                if( fs.existsSync(path) ) {
                    files = fs.readdirSync(path);
                    files.forEach(function(file,index){
                        var curPath = path + "/" + file;
                        if(fs.statSync(curPath).isDirectory()) { // recurse
                            clearFolder(curPath,true);
                        } else { // delete file
                            fs.unlinkSync(curPath);
                        }
                    });
                    if(state){
                        fs.rmdirSync(path);
                    }
                }
            };


            /**
             * 正则验证
             * @param file
             * @returns {boolean}
             */
            function filterFile (root,reg) {
                if (reg !== undefined) {
                    if (typeof reg.test == 'function' && reg.test(root)) {
                        return true;
                    }
                }else {
                    return true;
                }
            }

            /**
             * 读取文件
             * @param path路径
             * @param fn  返回结果，
             */
            function readFile(path,fn) {
                var item = fs.lstatSync(path);
                //判断是否是文件夹
                if(item.isFile()){
                    fs.readFile(path, 'utf8', function(err, str){
                        if (err) return fn(err);
                        fn(null, str,'DIRECTORY');
                    });
                }else if(item.isDirectory()){
                    fn(null, null ,'DIRECTORY');
                }
            }
            
            //文件路径解析
            function readPath(path){
                // Path.dirname(path);
                return Path.basename(path);
            }

            /**
             * 单文件模板话
             * @param data
             */
            function output(data) {
                if(!config.outputUrl){
                    console.log("请先选择存储路径");
                    return;
                }

                //判断文件路径是否已经读取
                if(!templatePathList.isRead){
                    readAllFile(templatePathList);
                    templatePathList.isRead=true;
                }

                function getFolder(node){
                    if(node.children && node.children.length>0){
                        angular.forEach(node.children,function(item){
                            readFile(item.path,function(err,str,type) {
                                if(type=="FILE"){
                                   var strData = jucks.renderString(str,data);
                                    fs.writeFile(config.outputUrl+item.rPath,strData,function(err){
                                        if (err) {
                                            console.log(err)
                                            return;
                                        }
                                    });
                                }else if(type=="DIRECTORY"){
                                    fs.mkdir(config.outputUrl+item.rPath,function(err){
                                        if (err) {
                                            console.log(err)
                                            return;
                                        }
                                    });
                                }

                            });
                            getFolder(item);
                        })
                    }
                }
                getFolder(templatePathList);
            }

            /**
             * 创建文件夹
             * @param path
             * @param fn
             */
            function createDirectory(path,fn) {
                //判断父级文件夹是否存在
                if(!fs.existsSync(Path.dirname(path))){
                    fn({"message":"父级不存在，请先创建！"});
                    return;
                }
                if(!fs.existsSync(path)){
                    fs.mkdirSync(path);
                }
            }

            /**
             * 创建文件
             * @param path
             * @param fn
             */
            function createFile(path,options,fn) {
                fs.writeFile(path,options,function(err) {
                    fn(err)
                });
            }
            /**
             * 根据模板创建文件
             * @param templatepath  输入模板路径
             * @param outPath   输出模板路径
             * @param options  配置项，数据
             * @param fn    回调函数
             */
            function createTemplateFile(templatepath,outPath,options,fn) {
                if(!fs.existsSync(templatepath)){
                    fn({"message":"模板文件不存在，请添加！"});
                    return;
                }
                fs.readFile(templatepath,'utf8', function(err, str){
                    if (err) return fn(err);
                    str = jucks.renderString(str, options);
                    if(str){
                        fs.writeFile(outPath,str,function(err){
                            if (err) {
                                console.log(err)
                                console.warn("写入失败！")
                                return;
                            }
                        });
                    }else {
                        console.warn("模板错误:"+path)
                    }
                });
            }

            /**
             * 创建目录下的所以文件夹
             * @param pPath  目录
             * @param list   目录下的文件夹
             */
            function createDirectoryList(pPath,list) {

                for(var i=0;i<list.length;i++){
                    createDirectory(pPath+"/"+list[i],function (err) {
                        dialogService.tip([err],null,1000);
                        return
                    });
                }

            }

            //模板输出
            function outputTemplate(directory) {
                if(!config.outputUrl){
                    dialogService.tip([{"message":"请先选择存储路径！"}],null,1000);
                    return;
                }


                //获取setting 配置信息
                fs.readFile(directory.path+"/setting.xml",{encoding:'utf-8'},function(err,files){
                    if(err) {
                        dialogService.tip([{"message": "请先修改文件夹资料！"}], null, 1000);
                        return
                    }

                    var xml =files;
                    parseString(xml,{ explicitArray : false, ignoreAttrs : true }, function (err, result) {
                        var filesJSON =result;
                        if(!filesJSON.setting.applicationCode){
                            dialogService.tip([{"message":"请先填写文件夹应用代码！"}],null,1000);
                            return
                        }
                        //清空目录
                        clearFolder(config.outputUrl+"/"+filesJSON.setting.applicationCode);

                        output(filesJSON);
                    });

                });



                /**
                 * 新建文件夹
                 * @param filesJSON  传递的xml配置文件数据
                 */
               function outputDirectory (filesJSON) {

                    var outputUrl=config.outputUrl+"/"+filesJSON.setting.applicationCode;
                    var outputMainUrl=config.outputUrl+"/"+filesJSON.setting.applicationCode+"/"+filesJSON.setting.applicationCode;
                    //新建文件夹
                    createDirectory(outputUrl,function (err) {
                        dialogService.tip([err],null,1000);
                        return
                    });
                    //   文件目录-business
                    createDirectory(outputMainUrl+"-business",function (err) {
                        dialogService.tip([err],null,1000);
                        return
                    });
                    //   文件目录-contract
                    createDirectory(outputMainUrl+"-contract",function (err) {
                        dialogService.tip([err],null,1000);
                        return
                    });

                    // business
                    createDirectoryList(outputMainUrl+"-business",['src']);
                    createDirectoryList(outputMainUrl+"-business/src",["main","test"]);
                    createDirectoryList(outputMainUrl+"-business/src/main",["java","resources"]);

                    //business/src/main/java  目录
                    createDirectoryList(outputMainUrl+"-business/src/main/java",["com"]);
                    createDirectoryList(outputMainUrl+"-business/src/main/java/com",[filesJSON.setting.companyCode]);
                    createDirectoryList(outputMainUrl+"-business/src/main/java/com/"+filesJSON.setting.companyCode,[filesJSON.setting.applicationCode]);
                    createDirectoryList(outputMainUrl+"-business/src/main/java/com/"+filesJSON.setting.companyCode
                        +"/"+filesJSON.setting.applicationCode,["biz","dal","po","svc"]);

                    //business/src/main/resources  目录
                    createDirectoryList(outputMainUrl+"-business/src/main/resources",["mapper","table"]);

                    //-business/src/test  目录
                    createDirectoryList(outputMainUrl+"-business/src/test",["java"]);
                    createDirectoryList(outputMainUrl+"-business/src/test/java",["com"]);
                    createDirectoryList(outputMainUrl+"-business/src/test/java/com",[filesJSON.setting.companyCode]);
                    createDirectoryList(outputMainUrl+"-business/src/test/java/com/"+filesJSON.setting.companyCode,[filesJSON.setting.applicationCode]);
                    createDirectoryList(outputMainUrl+"-business/src/test/java/com/"+filesJSON.setting.companyCode
                        +"/"+filesJSON.setting.applicationCode,["svc"]);

                    // contract
                    console.log(filesJSON.setting.companyCode);
                    createDirectoryList(outputMainUrl+"-contract",['src']);
                    createDirectoryList(outputMainUrl+"-contract/src",["main"]);
                    createDirectoryList(outputMainUrl+"-contract/src/main",["java"]);
                    createDirectoryList(outputMainUrl+"-contract/src/main/java",["com"]);
                    createDirectoryList(outputMainUrl+"-contract/src/main/java/com",[filesJSON.setting.companyCode]);
                    createDirectoryList(outputMainUrl+"-contract/src/main/java/com/"+filesJSON.setting.companyCode,[filesJSON.setting.applicationCode]);
                    createDirectoryList(outputMainUrl+"-contract/src/main/java/com/"+filesJSON.setting.companyCode
                        +"/"+filesJSON.setting.applicationCode,["domain","request","response","service"]);
                    //新建文件

                }

                /**
                 * 新建Pom文件
                 * @param filesJSON  传递的xml配置文件数据
                 */
               function outputPom (filesJSON) {
                    var outputUrl=config.outputUrl+"/"+filesJSON.setting.applicationCode;
                    var outputMainUrl=config.outputUrl+"/"+filesJSON.setting.applicationCode+"/"+filesJSON.setting.applicationCode;
                    var templateUrl=__dirname+config.templateUrl;
                    //新建文件夹

                   //新建 pom.xml
                   createTemplateFile(templateUrl+"/parentPom.xml",outputUrl+"/pom.xml", filesJSON, function (err) {
                       if (err) {
                           dialogService.tip([{"message":config.outputUrl+"/pom.xml 创建失败！"}],null,1000);
                       }
                   });
                   //新建 businessPom.xml
                   createTemplateFile(templateUrl+"/businessPom.xml",outputMainUrl+"-business/pom.xml",filesJSON,function (err) {
                       if (err) {
                           dialogService.tip([{"message":"businessPom.xml 创建失败！"}],null,1000);
                       }
                   });
                   //新建 contractPom.xml
                   createTemplateFile(templateUrl+"/contractPom.xml",outputMainUrl+"-contract/pom.xml",filesJSON, function (err) {
                       if (err) {
                           dialogService.tip([{"message": "contractPom.xml 创建失败！"}],null,1000);
                       }
                   });
               }

                /**
                 * 新建文件
                 * @param filesJSON  传递的xml配置文件数据
                 */
               function outputPomFile (filesJSON,directory) {
                    var outputMainUrl=config.outputUrl+"/"+filesJSON.setting.applicationCode+"/"+filesJSON.setting.applicationCode;
                    var templateUrl=__dirname+config.templateUrl;

                    //获取所有.t文件路径
                    var tList=[];
                    findFileUrl(tList,directory);
                    /*生成 biz 目录下的文件*/
                    //businessJavaUrl  "biz","dal","po","svc"
                    var businessJavaUrl=outputMainUrl+"-business/src/main/java/com/"+filesJSON.setting.companyCode+"/"+filesJSON.setting.applicationCode;
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessJavaUrl+"/biz",
                        templateUrl:templateUrl,
                        templateList:["Manager.java","ManagerImpl.java"]
                    });

                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessJavaUrl+"/dal",
                        templateUrl:templateUrl,
                        templateList:["Mapper.java","MapperAuto.java"]
                    });
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessJavaUrl+"/po",
                        templateUrl:templateUrl,
                        templateList:["PO.java"]
                    });
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessJavaUrl+"/svc",
                        templateUrl:templateUrl,
                        templateList:["ServiceImpl.java"]
                    });

                    //businessResourcesUrl  "mapper","table""
                    var businessResourcesUrl=outputMainUrl+"-business/src/main/resources";
                    //todo 文件有问题
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessResourcesUrl+"/mapper",
                        templateUrl:templateUrl,
                        templateList:["Mapper.xml","MapperAuto.xml"]
                    });
                    //todo 文件有问题
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessResourcesUrl+"/table",
                        templateUrl:templateUrl,
                        templateList:["Table.sql"]
                    });

                    //"businessTestUrl   "svc"
                    var businessTestUrl=outputMainUrl+"-business/src/test/java/com/"+filesJSON.setting.companyCode+"/"+filesJSON.setting.applicationCode;
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:businessTestUrl+"/svc",
                        templateUrl:templateUrl,
                        templateList:["Test.java"]
                    });


                    //"contractOutputUrl   "domain","request","response","service"
                    var contractOutputUrl=outputMainUrl+"-contract/src/main/java/com/"+filesJSON.setting.companyCode+"/"+filesJSON.setting.applicationCode;

                    //Domain.java
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:contractOutputUrl+"/domain",
                        templateUrl:templateUrl,
                        templateList:[
                            "Domain.java"
                        ]
                    });
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:contractOutputUrl+"/request",
                        templateUrl:templateUrl,
                        templateList:[
                            "ActiveRequest.java",
                            "InactiveRequest.java",
                            "CreateRequest.java",
                            "DeleteRequest.java",
                            "FindRequest.java",
                            "GetRequest.java",
                            "SearchRequest.java",
                            "UpdateRequest.java"
                        ]
                    });
                    createDirectoryFile({
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:contractOutputUrl+"/response",
                        templateUrl:templateUrl,
                        templateList:[
                            "ActiveResponse.java",
                            "InactiveResponse.java",
                            "CreateResponse.java",
                            "DeleteResponse.java",
                            "FindResponse.java",
                            "GetResponse.java",
                            "SearchResponse.java",
                            "UpdateResponse.java"
                        ]
                    });
                    createDirectoryFile({
                        isLast:true,
                        filesJSON:filesJSON,
                        tList:tList,
                        outUrl:contractOutputUrl+"/service",
                        templateUrl:templateUrl,
                        templateList:["Service.java"]
                    });


               }
                /**
                 * 遍历所以.t 文件路径
                 */
                function findFileUrl(tList,directory) {
                    for(var i=0;i<directory.children.length;i++){
                        if("file"==directory.children[i].type){
                            tList.push({
                                name:directory.children[i].name,
                                path:directory.children[i].path
                            })
                        }else {
                            findFileUrl(tList,directory.children[i]);
                        }
                    }
                };


                /**
                 * 输出模板文件夹里的所以文件
                 * @param filesJSON       setting文件数据
                 * @param templateUrl  模板的路径
                 * @param tList         数据文件路径
                 * @param templateList  数据文件路径
                 * @param outUrl       输出文件路径

                 */
                function createDirectoryFile(options){
                    var filesJSON=options.filesJSON;
                    var templateUrl=options.templateUrl;
                    var tList=options.tList ||[];
                    var templateList=options.templateList||[];
                    var outUrl=options.outUrl;



                    for(var i=0;i<options.templateList.length;i++){
                        for(var j=0;j<tList.length;j++){
                            //读取文件信息
                            doLogic(j,i)
                        }
                    }

                    function doLogic(j,i) {

                        function setName(str){
                            var arr=str.split("_");
                            for(var i=0;i<arr.length;i++){
                                arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substring(1).toLowerCase();
                            }
                            if(arr.length>1){
                                //删除前缀
                                arr.shift();
                            }
                            return arr.join("");
                        };

                        function nameNoPrefix(str){
                            var arr=str.split("_");
                            if(arr.length>1){
                                //删除前缀
                                arr.shift();
                            }
                            return arr.join("_");
                        };


                        readFile(tList[j].path,function(err,str) {
                            parseString(str,{ explicitArray : false, ignoreAttrs : true }, function (err, result) {

                                if(!result){
                                    console.log(tList[j].path);
                                    return
                                }
                                var data={
                                    setting:filesJSON.setting,
                                    table:result.table
                                };

                                //名称去除前缀
                                var name=setName(result.table.name);

                                data.table.nameNoPrefix=nameNoPrefix(result.table.name);
                                data.table.hasIsActive="false";
                                data.table.columns=data.table.columns.column;

                                data.table.columnsNoIdAndTenantId=[];
                                data.table.columnsNoId=[];
                                data.table.columnsNoTenantId=[];
                                data.table.columnsAll=[];
                                data.table.columnsWithWho=[];
                                data.table.columnNameList=[];

                                //是否有IsActive
                                function hasIsActive(){
                                    for(var index=0;index<data.table.columns.length;index++){
                                        var item=data.table.columns[index];
                                        if("IS_ACTIVE"==item.name){
                                            data.table.hasIsActive="true";
                                        }
                                        //类型处理
                                        switch(item.type){
                                            case 'String':
                                                item.java="String";
                                                item.mysqlDataType="VARCHAR("+item.max+")";
                                                item.jdbcType="VARCHAR";
                                                break;
                                            case 'Id':
                                                item.java="Long";
                                                item.mysqlDataType="BIGINT(20)";
                                                item.jdbcType="NUMERIC";
                                                break;
                                            case 'DateTime':
                                                item.java="Date";
                                                item.mysqlDataType="DATETIME";
                                                item.jdbcType="TIMESTAMP";
                                                break;
                                            case 'Data':
                                                item.java="Object";
                                                item.mysqlDataType="BLOB";
                                                item.jdbcType="BLOB";
                                                break;
                                            case 'Integer':
                                                item.java="Integer";
                                                item.mysqlDataType="INTEGER(20)";
                                                item.jdbcType="NUMERIC";
                                                break;
                                            case 'Decimal':
                                                item.java="Double";
                                                item.mysqlDataType="DECIMAL(19,5)";
                                                item.jdbcType="NUMERIC";
                                                break;
                                            case 'Amount':
                                                item.java="Double";
                                                item.mysqlDataType="DECIMAL(19,5)";
                                                item.jdbcType="NUMERIC";
                                                break;
                                            case 'Boolean':
                                                item.java="Boolean";
                                                item.mysqlDataType="TINYINT(1)";
                                                item.jdbcType="TINYINT";
                                                break;
                                            case 'Text':
                                                item.java="String";
                                                item.mysqlDataType="TEXT";
                                                item.jdbcType="VARCHAR";
                                                break;
                                            case 'Date':
                                                item.java="Date";
                                                item.mysqlDataType="DATETIME";
                                                item.jdbcType="TIMESTAMP";
                                                break;
                                            default:

                                        };

                                        if(item.isRequired=="true"){
                                            item.defaultNull="NOT NULL";
                                        }else {
                                            item.defaultNull="DEFAULT NULL";
                                        }


                                        //  NoIdAndTenantId
                                        if(item.name!="ID" && item.name!="TENANT_ID"){
                                            data.table.columnsNoIdAndTenantId.push(item)
                                        }
                                        //  columnsNoId
                                        if(item.name!="ID"){
                                            data.table.columnsNoId.push(item)
                                        }
                                        //  columnsNoTenantId
                                        if(item.name!="TENANT_ID"){
                                            data.table.columnsNoTenantId.push(item)
                                        }

                                        data.table.columnsAll.push(item);
                                        data.table.columnsWithWho.push(item);
                                        //columnNameList
                                        data.table.columnNameList.push(item.name);
                                    }
                                }

                                hasIsActive();
                                //columnsAll  和columnsWithWho设置
                                (function () {
                                    data.table.columnsAll.push({name:"ATTRIBUTE1",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位1"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE2",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位2"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE3",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位3"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE4",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位4"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE5",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位5"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE6",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位6"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE7",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位7"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE8",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位8"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE9",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位9"});
                                    data.table.columnsAll.push({name:"ATTRIBUTE10",mysqlDataType:"VARCHAR(500)",defaultNull:"DEFAULT NULL",meaning:"扩展栏位10"});
                                    data.table.columnsAll.push({name:"ROW_VERSION",mysqlDataType:"BIGINT(20)",defaultNull:"DEFAULT NULL",meaning:"行版本"});
                                    data.table.columnsAll.push({name:"IS_DELETED",mysqlDataType:"TINYINT(1)",defaultNull:"DEFAULT NULL",meaning:"是否已删除"});
                                    data.table.columnsAll.push({name:"CREATED_BY",mysqlDataType:"BIGINT(20)",defaultNull:"NOT NULL",meaning:"创建用户"});
                                    data.table.columnsAll.push({name:"CREATION_TIME",mysqlDataType:"DATETIME",defaultNull:"NOT NULL",meaning:"创建时间"});
                                    data.table.columnsAll.push({name:"LAST_UPDATED_BY",mysqlDataType:"BIGINT(20)",defaultNull:"DEFAULT NULL",meaning:"最后更新用户"});
                                    data.table.columnsAll.push({name:"LAST_UPDATE_TIME",mysqlDataType:"DATETIME",defaultNull:"DEFAULT NULL",meaning:"最后更新时间"});


                                    data.table.columnsWithWho.push({name:"ROW_VERSION",jdbcType:"NUMERIC",mysqlDataType:"BIGINT(20)",defaultNull:"DEFAULT NULL",meaning:"行版本"});
                                    data.table.columnsWithWho.push({name:"IS_DELETED",jdbcType:"TINYINT",mysqlDataType:"TINYINT(1)",defaultNull:"DEFAULT NULL",meaning:"是否已删除"});
                                    data.table.columnsWithWho.push({name:"CREATED_BY",jdbcType:"NUMERIC",mysqlDataType:"BIGINT(20)",defaultNull:"NOT NULL",meaning:"创建用户"});
                                    data.table.columnsWithWho.push({name:"CREATION_TIME",jdbcType:"TIMESTAMP",mysqlDataType:"DATETIME",defaultNull:"NOT NULL",meaning:"创建时间"});
                                    data.table.columnsWithWho.push({name:"LAST_UPDATED_BY",jdbcType:"NUMERIC",mysqlDataType:"BIGINT(20)",defaultNull:"DEFAULT NULL",meaning:"最后更新用户"});
                                    data.table.columnsWithWho.push({name:"LAST_UPDATE_TIME",jdbcType:"TIMESTAMP",mysqlDataType:"DATETIME",defaultNull:"DEFAULT NULL",meaning:"最后更新时间"});
                                })();



                                //Domain 文件夹处理
                                if("Domain.java"==templateList[i]){
                                    var newOutUrl=outUrl+"/"+name+".java";
                                }else if("Table.sql"==templateList[i]){
                                    var newOutUrl=outUrl+"/"+result.table.name.toUpperCase()+".sql";
                                } else {
                                    var newOutUrl=outUrl+"/"+name+templateList[i];
                                }


                                var isActive="true"; //是否生成模板
                                switch (templateList[i]){
                                    case "ActiveResponse.java":
                                    case "InactiveResponse.java":
                                    case "ActiveRequest.java":
                                    case "InactiveRequest.java":
                                        isActive=data.table.hasIsActive;
                                        break;
                                }

                                //是否生成模板
                                if(isActive=="true"){
                                    createTemplateFile(templateUrl+"/"+templateList[i],newOutUrl,data,function (err) {
                                        if (err) {
                                            console.log(outUrl+"/"+name+templateList[i]+"创建失败！");
                                        }
                                    })
                                }
                            });

                            // fs.writeFile(config.outputUrl+item.rPath,str,function(err){
                            //     if (err) {
                            //         console.log(err)
                            //         return;
                            //     }
                            // });
                        });
                    }

                    // createTemplateFile(templateUrl+"/contractPom.xml",outputMainUrl+"-contract/pom.xml",filesJSON, function (err) {
                    //     if (err) {
                    //         dialogService.tip([{"message": "contractPom.xml 创建失败！"}],null,1000);
                    //     }
                    // });

                    if(options.isLast){
                        $timeout(function () {
                            dialogService.tip([{"message":"生成成功！"},{"message":"生成文件目录："+config.outputUrl}],null,1000);
                        },1000)

                    }

                }

                //输出文件夹
                function output(filesJSON){
                    outputDirectory(filesJSON);
                    outputPom(filesJSON);
                    outputPomFile(filesJSON,directory);

                }
            }

            return {
                readAllFile:readAllFile,
                deleteFolder:deleteFolder,
                clearFolder:clearFolder,
                filterFile:filterFile,
                getConfig:getConfig,
                setConfig:setConfig,
                readPath:readPath,
                output: output,
                outputTemplate:outputTemplate
            }
        }]);
})();
/**
 * Created by DEV005 on 2016/3/31.
 */
(function () {
    'use strict';
    var fs = require("fs");
    var path = require('path');
    var json2xml = require('xml2js');
    var parseString = json2xml.parseString;

    var EditController=["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {

            $scope.typeList=[
                {key:"String",val:"String"},
                {key:"Id",val:"Id"},
                {key:"DateTime",val:"DateTime"},
                {key:"Data",val:"Data"},
                {key:"Integer",val:"Integer"},
                {key:"Decimal",val:"Decimal"},
                {key:"Amount",val:"Amount"},
                {key:"Boolean",val:"Boolean"},
                {key:"Text",val:"Text"},
                {key:"Date",val:"Date"}
            ];
            $scope.relateList=[
                {key:"FK",val:"FK"},
                {key:"Enum",val:"Enum"}
            ];

            $scope.selectType=function(item){
                if('String'== $scope.item.type) {
                    item.min="0";
                    item.max="100";
                } else {
                    item.min="";
                    item.max="";
                }
            };


            $scope.item=items;
            $scope.doSave =function(){
                if($scope.item.name){
                    if(!$scope.item.type || $scope.item.type ==""){
                        $scope.errors="类型不能为空！";
                        return ;
                    }else if(!$scope.item.meaning || $scope.item.meaning ==""){
                        $scope.errors="含义不能为空！";
                        return;
                    }
                }
                $modalInstance.dismiss($scope.items);
            };
            $scope.cancel = function () {
                $modalInstance.close('cancel');
            };
            //关闭错误
            $scope.closeAlert=function(){
                $scope.errors="";
            };
        }];
    function fileController($scope,$modal,$location,templateService,dialogService) {
        //数据修复
        function recoveryData(){
            angular.forEach($scope.vm.table.columns.column,function(item){
                if(item.max){
                    Number(item)
                }
            })
        }
        //文件接收
        $scope.$on('childFile', function(e,file){
            console.log("fileController.js");
            //如果是文件 读取文件
            var files=fs.readFileSync(file.path,{encoding:'utf-8'});

            parseString(files,{ explicitArray : false, ignoreAttrs : true }, function (err, result) {
                $scope.vm=result;
                if(angular.isArray($scope.vm.table.columns.column)){
                    $scope.vm.table.columns.column[0].isRequired=true;
                }else {
                    var newColumn=$scope.vm.table.columns.column;
                    $scope.vm.table.columns.column=[];
                    $scope.vm.table.columns.column[0]=newColumn;
                    $scope.vm.table.columns.column[0].isRequired=true;
                }
                //判断承租人
                $scope.selectTenant();
            });

        });


        $scope.$on('fileUrl', function(e,file){
            $scope.errors="";
            $scope.file=file;
            $scope.file.isNew=false;
            $scope.file.newName=$scope.file.name.substring(0,($scope.file.name.length-2))
        });

        //选择文件夹
        $scope.$on('childDirectory', function(e,path){
            $scope.file={};
        });

        $scope.vm={
            "table":{
                "name":"",
                "meaning":"",
                "description":"",
                "isByTenant":false,
                "uniqueIndex":"",
                "columns":{
                    "column":[
                        {  "name":"ID",
                            "type":"Id",
                            "meaning":"主键",
                            "description":"",
                            "isRequired":true,
                            "min":"",
                            "max":"",
                            "referenceType":"",
                            "referenceObject":"",
                            "isListable":true,
                            "isExportable":false,
                            "isQueryable":false,
                            "isSortable":true
                        }
                    ]
                }
            }
        };

        //判断是否新增
        var parameter=$location.search();
        if(parameter){
            addFile(parameter);
        }

        //新增文件夹
        function addFile(file){
            $scope.vm={
                "table":{
                    "name":"",
                    "meaning":"",
                    "description":"",
                    "isByTenant":false,
                    "uniqueIndex":"",
                    "columns":{
                        "column":[
                            {  "name":"ID",
                                "type":"Id",
                                "meaning":"主键",
                                "description":"",
                                "isRequired":true,
                                "min":"",
                                "max":"",
                                "referenceType":"",
                                "referenceObject":"",
                                "isListable":true,
                                "isExportable":false,
                                "isQueryable":false,
                                "isSortable":true
                            }
                        ]
                    }
                }
            };
            var  parentFile=file;
            $scope.file={
                isNew:true,
                type:"file",
                children : [],
                name:"",
                newName:"",
                parent:parentFile
            };
        };

        //行操作
        $scope.addLine=function(index){
            var item={
                "name":"",
                "type":"",
                "meaning":"",
                "description":"",
                "isRequired":false,
                "min":"",
                "max":"",
                "referenceType":"",
                "referenceObject":"",
                "isListable":false,
                "isExportable":false,
                "isQueryable":false,
                "isSortable":false
            };
            $scope.vm.table.columns.column.splice( index+1,0,item);
        };

        $scope.deleteLine=function(index){

            var dialogDefaults = {
                size:"sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除吗？",
                type:"delete",
                callback: function () {
                    if(  $scope.vm.table.columns.column.length=="1"){
                        $scope.vm.table.columns.column.splice(index,1);
                        //新加一条空数据
                        $scope.addLine(0);
                    }else{
                        if($scope.vm.table.columns.column[index].name=="TENANT_ID"){
                            $scope.vm.table.isByTenant=false;
                        }
                        $scope.vm.table.columns.column.splice(index,1);
                    }
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.selectType=function(item){
            if('String'==item.type) {
                item.min="0";
                item.max="100";
            } else {
                item.min="";
                item.max="";
            }
        };


        //业务操作
        $scope.selectTenant=function(){
            if($scope.vm.table.isByTenant && $scope.vm.table.isByTenant!="false" ){
                var isHave=false;
                angular.forEach($scope.vm.table.columns.column,function(data,index){
                    if(data.name=="TENANT_ID"){
                        isHave=true;
                    }
                });
                //添加
               if(!isHave){
                   var item={
                       "name":"TENANT_ID",
                       "type":"Id",
                       "meaning":"承租人ID",
                       "description":"",
                       "isRequired":false,
                       "min":"",
                       "max":"",
                       "referenceType":"FK",
                       "referenceObject":"SYS_TENANT.ID",
                       "isListable":true,
                       "isExportable":true,
                       "isQueryable":false,
                       "isSortable":true
                   };
                   $scope.vm.table.columns.column.splice(1,0,item)
               }
            }else {
                //angular.forEach($scope.vm.table.columns.column,function(data,index){
                //    if(data.name=="TENANT_ID"){
                //        $scope.vm.table.columns.column.splice(index,1)
                //    }
                //});
            }
        };


        //添加字段
        function addFieldFactory(addArray,protoArray,property){
            if(angular.isArray(addArray) && angular.isArray(protoArray)){
                for (var i= 0,addLength=addArray.length; i<addLength;i++){
                    var isHave=false;
                    angular.forEach(protoArray,function(data,index){
                        if(addArray[i][property]==data[property]){
                            isHave=true;
                        }
                    });
                    if(!isHave){
                        protoArray.push(addArray[i]);
                    }
                }
            }else {
                console.error("提供的参数请是数组!")
            }
        }
        
        //addRoutine 标准字段
        function  addRoutine(){
            var routineArray=[
                {
                    "name":"CODE",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"代码",
                    "description":"",
                    "isRequired":true,
                    "min":"",
                    "max":"50",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                },
                {
                    "name":"TYPE",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"类型",
                    "description":"",
                    "isRequired":true,
                    "min":"",
                    "max":"50",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                },
                {
                    "name":"NAME",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"名称",
                    "description":"",
                    "isRequired":true,
                    "min":"",
                    "max":"100",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                },
                {
                    "name":"DESCRIPTION",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"描述",
                    "description":"",
                    "isRequired":false,
                    "min":"",
                    "max":"500",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                }
            ];
            addFieldFactory(routineArray,$scope.vm.table.columns.column,"name");
        }

        //addRoutine 标准字段
        function  addOperative(){
            var operativeArray=[
                {"name":"IS_ACTIVE","type":"Boolean", "meaning":"是否有效","description":"","isRequired":true,"min":"", "max":"","referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":true},
                {"name":"ACTIVE_DATE", "type":"Date", "meaning":"生效日期","description":"","isRequired":true, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"INACTIVE_DATE", "type":"Date", "meaning":"失效日期","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false}
            ];
            addFieldFactory(operativeArray,$scope.vm.table.columns.column,"name");
        }

        //addRoutine 标准字段
        function  addForm(){
            var formArray=[
                {"name":"IS_SUBMIT","type":"Boolean", "meaning":"是否已提交","description":"","isRequired":true,"min":"", "max":"","referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"SUBMIT_USER_ID", "type":"Id", "meaning":"提交用户ID","description":"","isRequired":false, "min":"","max":"", "referenceType":"FK","referenceObject":"SYS_USER.ID","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"SUBMIT_USER_NAME", "type":"String", "meaning":"提交用户姓名","description":"","isRequired":false, "min":"","max":"200", "referenceType":"FK","referenceObject":"SYS_USER.NAME","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"SUBMIT_TIME", "type":"DateTime", "meaning":"提交时间","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"IS_APPROVED", "type":"Boolean", "meaning":"是否已审批","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"APPROVE_USER_ID", "type":"Id", "meaning":"审批用户ID","description":"","isRequired":false, "min":"","max":"", "referenceType":"FK","referenceObject":"SYS_USER.ID","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"APPROVE_USER_NAME", "type":"String", "meaning":"审批用户姓名","description":"","isRequired":false, "min":"","max":"200", "referenceType":"FK","referenceObject":"SYS_USER.NAME","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"APPROVE_TIME", "type":"DateTime", "meaning":"审批时间","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"APPROVE_RESULT", "type":"String", "meaning":"审批结果","description":"","isRequired":false, "min":"","max":"200", "referenceType":"Enum","referenceObject":"AGREE,DISAGREE","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"IS_POSTED", "type":"Boolean", "meaning":"是否已过帐","description":"","isRequired":true, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"POST_USER_ID", "type":"Id", "meaning":"过账用户ID","description":"","isRequired":false, "min":"","max":"", "referenceType":"FK","referenceObject":"SYS_USER.ID","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"POST_USER_NAME", "type":"String", "meaning":"过账用户姓名","description":"","isRequired":false, "min":"","max":"200", "referenceType":"FK","referenceObject":"SYS_USER.NAME","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"POST_TIME", "type":"DateTime", "meaning":"过账时间","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false}
            ];
            addFieldFactory(formArray,$scope.vm.table.columns.column,"name");
        }


        $scope.addField=function(parameter){
            switch (parameter){
                case "routine" :
                    addRoutine();
                    break;
                case "operative":
                    addOperative();
                    break;
                case "form":
                    addForm();
                    break;
            }
        };



        //编辑
        $scope.editLine=function(item){

            var modalInstance = $modal.open({
                templateUrl: "editLine.html",
                controller: EditController,
                resolve: {
                    items: function () {
                        return  item;
                    }
                }
            });
            modalInstance.result.then(function (data) {
                item=data;
            });

        };


        //删除文件
        $scope.delete=function(){
            var dialogDefaults = {
                size:"sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除吗？",
                type:"delete",
                callback: function () {
                    if($scope.file.type=='file'){
                        fs.unlinkSync($scope.file.path)
                    }else if( $scope.file.type=='folder'){
                        templateService.deleteFolder($scope.file.path);
                    }
                    $scope.$emit('parentDelete', $scope.file);
                    dialogService.tip([{"message":"删除成功!"}],null,1000);
                    $scope.file={};
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);

        };

        //重命名
        $scope.rename=function(){
            if($scope.file.type=='file' && $scope.file.name!=$scope.vm.table.name+".t"){
                //重命名
                //文件名称与表名称相同
                fs.rename($scope.file.path,$scope.file.parent.path+"/"+$scope.vm.table.name+'.t',function(err){
                    if (err) {
                        dialogService.tip([{"message":"没有权限！"}],null,1000);
                        return;
                    }
                    $scope.file.name=$scope.vm.table.name+'.t';
                    $scope.file.path=$scope.file.parent.path+"/"+$scope.vm.table.name+'.t';
                    $scope.$emit('parentRename', $scope.file);
                });

            }
        };

        $scope.closeAlert=function(){
            $scope.errors="";
        };

        //保存文件
        $scope.doSubmitFile=function(){
            //转换成xml
            console.log($scope.vm.table.columns.column);

            //转换成xml   $scope.file.newName
            if(!$scope.vm.table.name || $scope.vm.table.name==""){
                $scope.errors="请填写表名称！";
                return ;
            }else {
                //判断名称是否存在
                var state=false;
                angular.forEach($scope.file.parent.children,function(brother){
                    if(brother.type=="file"  && brother.name!=$scope.file.name && brother.name==$scope.vm.table.name+".t"){
                        state=true;
                    }
                });
                if(state){
                    state=undefined;
                    $scope.errors="文件名称已存在！";
                    return ;
                }

            }

            //判断是否需要重命名
            if($scope.file.isNew){
                $scope.file.name=$scope.vm.table.name+'.t';
                $scope.file.path=$scope.file.parent.path+"/"+$scope.vm.table.name+'.t';
            }else {
                $scope.rename();
            }


            for(var length=$scope.vm.table.columns.column.length;length>0;length--){
                if(!$scope.vm.table.columns.column[length-1].name){
                    $scope.vm.table.columns.column.splice(length-1,1);
                }
            }

            for(var i=0;i<$scope.vm.table.columns.column.length;i++){
                for(var j=i+1;j<$scope.vm.table.columns.column.length;j++){
                    if($scope.vm.table.columns.column[i].name==$scope.vm.table.columns.column[j].name){
                        $scope.errors="第"+(i+1)+"条数据与第"+(j+1)+"条数据名称相同！";
                        return;
                    }
                }
                if(!$scope.vm.table.columns.column[i].type ||$scope.vm.table.columns.column[i].type ==""){
                    $scope.errors="第"+(i+1)+"条数据类型不能为空！";
                    return ;
                }else if(!$scope.vm.table.columns.column[i].meaning || $scope.vm.table.columns.column[i].meaning ==""){
                    $scope.errors="第"+(i+1)+"条数据含义不能为空！";
                    return;
                }
            }

            var builder = new json2xml.Builder();  // JSON->xml
            var xml =  builder.buildObject($scope.vm);

            fs.writeFile($scope.file.parent.path+"/"+$scope.vm.table.name+".t", xml,function(err){
                if (err) {
                    dialogService.tip([{"message":"没有权限！"}],null,1000);
                    return;
                }
                //增加地址
                /*
                 $scope.file.path=$scope.file.parent.path+"/"+$scope.file.name;*/
                //如果创建创建文件夹向上传递
                if($scope.file.isNew){
                    $scope.$emit('parentAdd', $scope.file);
                    dialogService.tip([{"message":"文件新建成功!"}],null,1000);
                    $scope.file={};
                }else {
                    dialogService.tip([{"message":"文件修改成功!"}],null,1000);
                }

            });
        };

        //模板生成
        $scope.outputTemplate=function () {
            templateService.output($scope.vm.table);
        }

    }
    angular.module('app')
        .controller('FileController', ["$scope","$modal","$location","templateService","dialogService",fileController]);
})();
/**
 * Created by DEV005 on 2016/3/31.
 */
(function () {
    'use strict';
    var fs = require("fs");
    var path = require('path');
    var json2xml = require('xml2js');
    var parseString = json2xml.parseString;
    var Builder = json2xml.Builder;


    function FolderController($scope,$modal,$location,templateService,dialogService) {
        //数据修复
        function recoveryData(){
            angular.forEach($scope.vm.table.columns.column,function(item){
                if(item.max){
                    Number(item)
                }
            })
        }

        //文件夹接收
        $scope.$on('childFile', function(e,file){
            console.log("folderController")
            //读取文件
            fs.readFile(file.path+"/setting.xml",{encoding:'utf-8'},function(err,files){
                if(err){
                    //如果没有 则创建
                    var settingData={
                        "setting":{
                            applicationCode:"",
                            applicationName:"",
                            companyCode:"xiniunet",
                            companyName:"",
                            developerName:"",
                            tablePrefix:"XXX_"
                        }
                    };

                    var builder = new json2xml.Builder();  // JSON->xml
                    var xml =  builder.buildObject( settingData);

                    fs.writeFile(file.path+"/setting.xml",xml,function(err) {
                        if (err) {
                            dialogService.tip([{"message":"没有权限！"}],null,1000);
                            return;
                        }

                        $scope.setting=settingData;
                        if(!$scope.setting.setting.tablePrefix || $scope.setting.setting.tablePrefix==""){
                            $scope.setting.setting.tablePrefix="XXX_";
                        }
                    });

                }else {
                    var parseString = require('xml2js').parseString;
                    var xml =files;
                    parseString(xml,{ explicitArray : false, ignoreAttrs : true }, function (err, result) {
                        console.log(result);
                        $scope.setting=result;
                        if(!$scope.setting.setting.tablePrefix || $scope.setting.setting.tablePrefix==""){
                            $scope.setting.setting.tablePrefix="XXX_";
                        }
                    });
                }
                $scope.$apply();
            })
        });

        /*判断是文件还是文件夹*/
        $scope.$on('fileUrl', function(e,file){
            $scope.errors="";
            $scope.file=file;
            $scope.file.isNew=false;
            if(file.type=='folder'){
                $scope.file.newName=$scope.file.name;
            }else {
                $scope.file.newName=$scope.file.name.substring(0,($scope.file.name.length-2))
            }
        });

        //选择文件夹
        $scope.$on('childDirectory', function(e,path){
            $scope.file={};
        });

        $scope.setting={
            "setting":{
                applicationCode:"",
                applicationName:"",
                companyCode:"",
                companyName:"xiniunet",
                developerName:"",
                tablePrefix:"XXX_"
            }
        };

        //新增文件
        $scope.addFile=function(){
            $location.path("/file").search($scope.file);
        };

        //新增文件夹
        $scope.addFolder=function(){

            $scope.setting={
                "setting":{
                    applicationCode:"",
                    applicationName:"",
                    companyCode:"xiniunet",
                    companyName:"",
                    developerName:"",
                    tablePrefix:"XXX_"
                }
            };

            var  parentFile=$scope.file;
            $scope.file={
                isNew:true,
                type:"folder",
                children : [],
                name:"",
                newName:"",
                parent:parentFile
            };
        };
        
        //删除文件
        $scope.delete=function(){
            var dialogDefaults = {
                size:"sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除吗？",
                type:"delete",
                callback: function () {
                    if($scope.file.type=='file'){
                        fs.unlinkSync($scope.file.path)
                    }else if( $scope.file.type=='folder'){
                        templateService.deleteFolder($scope.file.path);
                    }
                    $scope.$emit('parentDelete', $scope.file);
                    dialogService.tip([{"message":"删除成功!"}],null,1000);
                    $scope.file={};
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);

        };

        //重命名
        $scope.rename=function(){
            if (!$scope.file.newName || $scope.file.newName==""){
                $scope.errors="请填写文件夹名称！";
                return ;
            }else {
                var state=false;
                angular.forEach($scope.file.parent.children,function(brother){
                    if(brother.type=="folder" && brother.name==$scope.file.newName && $scope.file.newName!=$scope.file.name){
                        state=true;
                    }
                });
                if(state){
                    state=undefined;
                    $scope.errors="文件夹名称已存在！";
                    return ;
                }

            }
            $scope.file.name=$scope.file.newName;

            //重命名
            fs.rename($scope.file.path,$scope.file.parent.path+"/"+$scope.file.newName,function(err){
                if (err) {
                    dialogService.tip([{"message":"没有权限！"}],null,1000);
                    return;
                }
                $scope.file.name=$scope.file.newName;
                $scope.file.path=$scope.file.parent.path+"/"+$scope.file.newName;
                $scope.$emit('parentRename', $scope.file);
            });
        };

        $scope.closeAlert=function(){
            $scope.errors="";
        };

        //保存文件夹
        $scope.doSubmit=function(){
            //转换成xml
            if($scope.file.isNew){
                if (!$scope.file.newName || $scope.file.newName==""){
                    $scope.errors="请填写文件夹名称！";
                    return ;
                }
                var state=false;
                angular.forEach($scope.file.parent.children,function(brother){
                    if(brother.type=="folder" && brother.name==$scope.file.newName && $scope.file.newName!=$scope.file.name){
                        state=true;
                    }
                });
                if(state){
                    state=undefined;
                    $scope.errors="文件夹名称已存在！";
                    return ;
                }

                $scope.file.name=$scope.file.newName;
            }else {
                $scope.rename();
            }

            if(!$scope.file.isNew){
                if(!$scope.setting.setting.applicationCode){
                    $scope.errors="应用代码不能为空！";
                    return
                }
                if(!$scope.setting.setting.companyCode){
                    $scope.errors="公司代码不能为空！";
                    return
                }
            }

            //如果创建创建文件夹
            if($scope.file.isNew){
                fs.mkdirSync($scope.file.parent.path+"/"+$scope.file.name);
                $scope.file.path=$scope.file.parent.path+"/"+$scope.file.name;

            }
            var builder = new json2xml.Builder();  // JSON->xml
            var xml =  builder.buildObject( $scope.setting);


            fs.writeFile($scope.file.path+"/setting.xml", xml,function(err){
                if (err) {
                    dialogService.tip([{"message":"没有权限！"}],null,1000);
                    return;
                }
                //如果创建创建文件夹向上传递
                if($scope.file.isNew){
                    $scope.$emit('parentAdd', $scope.file);
                    dialogService.tip([{"message":"文件夹新建成功!"}],null,1000);
                    $scope.file={};
                }else {
                    dialogService.tip([{"message":"文件夹修改成功!"}],null,1000);
                }
            });
        };
    }
    
    

    angular.module('app')
        .controller('FolderController', ["$scope","$modal","$location","templateService","dialogService",FolderController]);
})();
/**
 * Created by DEV005 on 2016/3/31.
 */
(function () {
    'use strict';
    var fs = require("fs");
    var json2xml = require('xml2js');

    var EditController=["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {

            $scope.typeList=[
                {key:"String",val:"String"},
                {key:"Id",val:"Id"},
                {key:"DateTime",val:"DateTime"},
                {key:"Data",val:"Data"},
                {key:"Integer",val:"Integer"},
                {key:"Decimal",val:"Decimal"},
                {key:"Amount",val:"Amount"},
                {key:"Boolean",val:"Boolean"},
                {key:"Text",val:"Text"},
                {key:"Date",val:"Date"}
            ];
            $scope.relateList=[
                {key:"FK",val:"FK"},
                {key:"Enum",val:"Enum"}
            ];

            $scope.selectType=function(item){
                if('String'== $scope.item.type) {
                    item.min="0";
                    item.max="100";
                } else {
                    item.min="";
                    item.max="";
                }
            };


            $scope.item=items;
            $scope.doSave =function(){
                if($scope.item.name){
                    if(!$scope.item.type || $scope.item.type ==""){
                        $scope.errors="类型不能为空！";
                        return ;
                    }else if(!$scope.item.meaning || $scope.item.meaning ==""){
                        $scope.errors="含义不能为空！";
                        return;
                    }
                }
                $modalInstance.dismiss($scope.items);
            };
            $scope.cancel = function () {
                $modalInstance.close('cancel');
            };
            //关闭错误
            $scope.closeAlert=function(){
                $scope.errors="";
            };
        }];


    function customerController($scope,$modal,dialogService) {
        //数据修复
        function recoveryData(){
            angular.forEach($scope.vm.table.columns.column,function(item){
                if(item.max){
                    Number(item)
                }
            })
        }
        //文件接收
        $scope.$on('childFileData', function(e,fileData){
            $scope.vm=fileData;
            console.log(fileData);

            if(angular.isArray($scope.vm.table.columns.column)){
                $scope.vm.table.columns.column[0].isRequired=true;
            }else {
                   var newColumn=$scope.vm.table.columns.column;
                   $scope.vm.table.columns.column=[];
                   $scope.vm.table.columns.column[0]=newColumn;
                   $scope.vm.table.columns.column[0].isRequired=true;
            }

            //判断承租人
            $scope.selectTenant();
        });

        //文件夹接收
        $scope.$on('childFolderData', function(e,fileData){
            $scope.setting=fileData;
            if(!$scope.setting.setting.tablePrefix || $scope.setting.setting.tablePrefix==""){
                $scope.setting.setting.tablePrefix="XXX_";
            }
        });

        $scope.$on('childFile', function(e,file){
            $scope.errors="";
            $scope.file=file;
            $scope.file.isNew=false;
            if(file.type=='folder'){
                $scope.file.newName=$scope.file.name;
            }else {
                $scope.file.newName=$scope.file.name.substring(0,($scope.file.name.length-2))
            }
        });

        //选择文件夹
        $scope.$on('childDirectory', function(e,path){
            $scope.file={};
        });


        $scope.setting={
            "setting":{
                applicationCode:"",
                applicationName:"",
                companyCode:"",
                companyName:"",
                developerName:"",
                tablePrefix:"XXX_"
            }
        };

        $scope.vm={
            "table":{
                "name":"",
                "meaning":"",
                "description":"",
                "isByTenant":false,
                "uniqueIndex":"",
                "columns":{
                    "column":[
                        {  "name":"ID",
                            "type":"Id",
                            "meaning":"主键",
                            "description":"",
                            "isRequired":true,
                            "min":"",
                            "max":"",
                            "referenceType":"",
                            "referenceObject":"",
                            "isListable":true,
                            "isExportable":false,
                            "isQueryable":false,
                            "isSortable":true
                        }
                    ]
                }
            }
        };





        //行操作
        $scope.addLine=function(index){
            var item={
                "name":"",
                "type":"",
                "meaning":"",
                "description":"",
                "isRequired":false,
                "min":"",
                "max":"",
                "referenceType":"",
                "referenceObject":"",
                "isListable":false,
                "isExportable":false,
                "isQueryable":false,
                "isSortable":false
            };
            $scope.vm.table.columns.column.splice( index+1,0,item);
        };


        $scope.deleteLine=function(index){

            var dialogDefaults = {
                size:"sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除吗？",
                type:"delete",
                callback: function () {
                    if(  $scope.vm.table.columns.column.length=="1"){
                        $scope.vm.table.columns.column.splice(index,1);
                        //新加一条空数据
                        $scope.addLine(0);
                    }else{
                        if($scope.vm.table.columns.column[index].name=="TENANT_ID"){
                            $scope.vm.table.isByTenant=false;
                        }
                        $scope.vm.table.columns.column.splice(index,1);
                    }
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.selectType=function(item){
            if('String'==item.type) {
                item.min="0";
                item.max="100";
            } else {
                item.min="";
                item.max="";
            }
        };


        //业务操作
        $scope.selectTenant=function(){
            if($scope.vm.table.isByTenant && $scope.vm.table.isByTenant!="false" ){
                var isHave=false;
                angular.forEach($scope.vm.table.columns.column,function(data,index){
                    if(data.name=="TENANT_ID"){
                        isHave=true;
                    }
                });
                //添加
               if(!isHave){
                   var item={
                       "name":"TENANT_ID",
                       "type":"Id",
                       "meaning":"承租人ID",
                       "description":"",
                       "isRequired":true,
                       "min":"",
                       "max":"",
                       "referenceType":"FK",
                       "referenceObject":"SYS_TENANT.ID",
                       "isListable":true,
                       "isExportable":true,
                       "isQueryable":true,
                       "isSortable":true
                   };
                   $scope.vm.table.columns.column.splice(1,0,item)
               }
            }else {
                //angular.forEach($scope.vm.table.columns.column,function(data,index){
                //    if(data.name=="TENANT_ID"){
                //        $scope.vm.table.columns.column.splice(index,1)
                //    }
                //});
            }
        };



        //添加字段
        function addFieldFactory(addArray,protoArray,property){
            if(angular.isArray(addArray) && angular.isArray(protoArray)){
                for (var i= 0,addLength=addArray.length; i<addLength;i++){
                    var isHave=false;
                    angular.forEach(protoArray,function(data,index){
                        if(addArray[i][property]==data[property]){
                            isHave=true;
                        }
                    });
                    if(!isHave){
                        protoArray.push(addArray[i]);
                    }
                }
            }else {
                console.error("提供的参数请是数组!")
            }
        }


        //addRoutine 标准字段
        function  addRoutine(){
            var routineArray=[
                {
                    "name":"CODE",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"代码",
                    "description":"",
                    "isRequired":true,
                    "min":"",
                    "max":"50",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                },
                {
                    "name":"TYPE",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"类型",
                    "description":"",
                    "isRequired":true,
                    "min":"",
                    "max":"50",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                },
                {
                    "name":"NAME",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"名称",
                    "description":"",
                    "isRequired":true,
                    "min":"",
                    "max":"100",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                },
                {
                    "name":"DESCRIPTION",
                    "type":"String",
                    "meaning":$scope.vm.table.meaning+"描述",
                    "description":"",
                    "isRequired":false,
                    "min":"",
                    "max":"500",
                    "referenceType":"",
                    "referenceObject":"",
                    "isListable":true,
                    "isExportable":true,
                    "isQueryable":true,
                    "isSortable":true
                }
            ];
            addFieldFactory(routineArray,$scope.vm.table.columns.column,"name");
        }

        //addRoutine 标准字段
        function  addOperative(){
            var operativeArray=[
                {"name":"IS_ACTIVE","type":"Boolean", "meaning":"是否有效","description":"","isRequired":true,"min":"", "max":"","referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":true},
                {"name":"ACTIVE_DATE", "type":"Date", "meaning":"生效日期","description":"","isRequired":true, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"INACTIVE_DATE", "type":"Date", "meaning":"失效日期","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false}
            ];
            addFieldFactory(operativeArray,$scope.vm.table.columns.column,"name");
        }

        //addRoutine 标准字段
        function  addForm(){
            var formArray=[
                {"name":"IS_SUBMIT","type":"Boolean", "meaning":"是否已提交","description":"","isRequired":true,"min":"", "max":"","referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"SUBMIT_USER_ID", "type":"Id", "meaning":"提交用户ID","description":"","isRequired":false, "min":"","max":"", "referenceType":"FK","referenceObject":"SYS_USER.ID","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"SUBMIT_USER_NAME", "type":"String", "meaning":"提交用户姓名","description":"","isRequired":false, "min":"","max":"200", "referenceType":"FK","referenceObject":"SYS_USER.NAME","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"SUBMIT_TIME", "type":"DateTime", "meaning":"提交时间","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"IS_APPROVED", "type":"Boolean", "meaning":"是否已审批","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"APPROVE_USER_ID", "type":"Id", "meaning":"审批用户ID","description":"","isRequired":false, "min":"","max":"", "referenceType":"FK","referenceObject":"SYS_USER.ID","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"APPROVE_USER_NAME", "type":"String", "meaning":"审批用户姓名","description":"","isRequired":false, "min":"","max":"200", "referenceType":"FK","referenceObject":"SYS_USER.NAME","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"APPROVE_TIME", "type":"DateTime", "meaning":"审批时间","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"APPROVE_RESULT", "type":"String", "meaning":"审批结果","description":"","isRequired":false, "min":"","max":"200", "referenceType":"Enum","referenceObject":"AGREE,DISAGREE","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"IS_POSTED", "type":"Boolean", "meaning":"是否已过帐","description":"","isRequired":true, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false},
                {"name":"POST_USER_ID", "type":"Id", "meaning":"过账用户ID","description":"","isRequired":false, "min":"","max":"", "referenceType":"FK","referenceObject":"SYS_USER.ID","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"POST_USER_NAME", "type":"String", "meaning":"过账用户姓名","description":"","isRequired":false, "min":"","max":"200", "referenceType":"FK","referenceObject":"SYS_USER.NAME","isListable":true,"isExportable":true,"isQueryable":true,"isSortable":false},
                {"name":"POST_TIME", "type":"DateTime", "meaning":"过账时间","description":"","isRequired":false, "min":"","max":"", "referenceType":"","referenceObject":"","isListable":true,"isExportable":true,"isQueryable":false,"isSortable":false}
            ];
            addFieldFactory(formArray,$scope.vm.table.columns.column,"name");
        }


        $scope.addField=function(parameter){
            switch (parameter){
                case "routine" :
                    addRoutine();
                    break;
                case "operative":
                    addOperative();
                    break;
                case "form":
                    addForm();
                    break;
            }
        };



            //新增文件夹
        $scope.addFile=function(){

            $scope.vm={
                "table":{
                    "name":"",
                    "meaning":"",
                    "description":"",
                    "isByTenant":false,
                    "uniqueIndex":"",
                    "columns":{
                        "column":[
                            {  "name":"ID",
                                "type":"Id",
                                "meaning":"主键",
                                "description":"",
                                "isRequired":true,
                                "min":"",
                                "max":"",
                                "referenceType":"",
                                "referenceObject":"",
                                "isListable":true,
                                "isExportable":false,
                                "isQueryable":false,
                                "isSortable":true
                            }
                        ]
                    }
                }
            };

            var  parentFile=$scope.file;
            $scope.file={
                isNew:true,
                type:"file",
              /*  path:parentFile.path+"/"+parentFile.name,*/
                children : [],
                name:"",
                newName:"",
                parent:parentFile
            };
        };


        //新增文件夹
        $scope.addFolder=function(){

            $scope.setting={
                "setting":{
                    applicationCode:"",
                    applicationName:"",
                    companyCode:"",
                    companyName:"",
                    developerName:"",
                    tablePrefix:"XXX_"
                }
            };

            var  parentFile=$scope.file;
            $scope.file={
                isNew:true,
                type:"folder",
              /*  path:parentFile.path+"/"+parentFile.name,*/
                children : [],
                name:"",
                newName:"",
                parent:parentFile
            };
        };


        //编辑
        $scope.editLine=function(item){

            var modalInstance = $modal.open({
                templateUrl: "editLine.html",
                controller: EditController,
                resolve: {
                    items: function () {
                        return  item;
                    }
                }
            });
            modalInstance.result.then(function (data) {
                item=data;
            });

        };


        //删除文件
        $scope.delete=function(){
            var dialogDefaults = {
                size:"sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除吗？",
                type:"delete",
                callback: function () {
                    if($scope.file.type=='file'){
                        fs.unlinkSync($scope.file.path)
                    }else if( $scope.file.type=='folder'){
                        deleteFolderRecursive($scope.file.path);
                    }
                    $scope.$emit('parentDelete', $scope.file);
                    dialogService.tip([{"message":"删除成功!"}],null,1000);
                    $scope.file={};
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);

        };

        //重命名
        $scope.rename=function(){
            if($scope.file.type=='file' && $scope.file.name!=$scope.vm.table.name+".t"){
                //重命名

                //文件名称与表名称相同
                fs.rename($scope.file.path,$scope.file.parent.path+"/"+$scope.vm.table.name+'.t',function(err){
                    if (err) {
                        dialogService.tip([{"message":"没有权限！"}],null,1000);
                        return;
                    }
                    $scope.file.name=$scope.vm.table.name+'.t';
                    $scope.file.path=$scope.file.parent.path+"/"+$scope.vm.table.name+'.t';
                    $scope.$emit('parentRename', $scope.file);
                });

            }else if( $scope.file.type=='folder' && $scope.file.newName!=$scope.file.name) {
                if (!$scope.file.newName || $scope.file.newName==""){
                    $scope.errors="请填写文件夹名称！";
                    return ;
                }else {
                    var state=false;
                    angular.forEach($scope.file.parent.children,function(brother){
                        if(brother.type=="folder" && brother.name==$scope.file.newName && $scope.file.newName!=$scope.file.name){
                            state=true;
                        }
                    });
                    if(state){
                        state=undefined;
                        $scope.errors="文件夹名称已存在！";
                        return ;
                    }

                }
                $scope.file.name=$scope.file.newName;

                //重命名
                fs.rename($scope.file.path,$scope.file.parent.path+"/"+$scope.file.newName,function(){
                    if (err) {
                        dialogService.tip([{"message":"没有权限！"}],null,1000);
                        return;
                    }
                    $scope.file.name=$scope.file.newName;
                    $scope.file.path=$scope.file.parent.path+"/"+$scope.file.newName;
                    $scope.$emit('parentRename', $scope.file);
                });

            }
        };

        $scope.closeAlert=function(){
            $scope.errors="";
        };

        //保存文件
        $scope.doSubmitFile=function(){
            //转换成xml
            console.log($scope.vm.table.columns.column);


            //转换成xml   $scope.file.newName
            if(!$scope.vm.table.name || $scope.vm.table.name==""){
                $scope.errors="请填写表名称！";
                return ;
            }else {
                //判断名称是否存在

                var state=false;
                angular.forEach($scope.file.parent.children,function(brother){
                    if(brother.type=="file"  && brother.name!=$scope.file.name && brother.name==$scope.vm.table.name+".t"){
                        state=true;
                    }
                });
                if(state){
                    state=undefined;
                    $scope.errors="文件名称已存在！";
                    return ;
                }

            }

            //判断是否需要重命名
            if($scope.file.isNew){
                $scope.file.name=$scope.vm.table.name+'.t';
                $scope.file.path=$scope.file.parent.path+"/"+$scope.vm.table.name+'.t';
            }else {
                $scope.rename();
            }


            for(var length=$scope.vm.table.columns.column.length;length>0;length--){
                if(!$scope.vm.table.columns.column[length-1].name){
                    $scope.vm.table.columns.column.splice(length-1,1);
                }
            }

            for(var i=0;i<$scope.vm.table.columns.column.length;i++){
                for(var j=i+1;j<$scope.vm.table.columns.column.length;j++){
                    if($scope.vm.table.columns.column[i].name==$scope.vm.table.columns.column[j].name){
                        $scope.errors="第"+(i+1)+"条数据与第"+(j+1)+"条数据名称相同！";
                        return;
                    }
                }
                if(!$scope.vm.table.columns.column[i].type ||$scope.vm.table.columns.column[i].type ==""){
                    $scope.errors="第"+(i+1)+"条数据类型不能为空！";
                    return ;
                }else if(!$scope.vm.table.columns.column[i].meaning || $scope.vm.table.columns.column[i].meaning ==""){
                    $scope.errors="第"+(i+1)+"条数据含义不能为空！";
                    return;
                }
            }

            var builder = new json2xml.Builder();  // JSON->xml
            var xml =  builder.buildObject($scope.vm);

            fs.writeFile($scope.file.parent.path+"/"+$scope.vm.table.name+".t", xml,function(err){
                if (err) {
                    dialogService.tip([{"message":"没有权限！"}],null,1000);
                    return;
                }
                //增加地址
                /*
                 $scope.file.path=$scope.file.parent.path+"/"+$scope.file.name;*/
                //如果创建创建文件夹向上传递
                if($scope.file.isNew){
                    $scope.$emit('parentAdd', $scope.file);
                    dialogService.tip([{"message":"文件新建成功!"}],null,1000);
                    $scope.file={};
                }else {
                    dialogService.tip([{"message":"文件修改成功!"}],null,1000);
                }

            });
        };
        //保存文件夹
        $scope.doSubmit=function(){
            //转换成xml
            if($scope.file.isNew){
                if (!$scope.file.newName || $scope.file.newName==""){
                    $scope.errors="请填写文件夹名称！";
                    return ;
                }else {
                    var state=false;
                    angular.forEach($scope.file.parent.children,function(brother){
                        if(brother.type=="folder" && brother.name==$scope.file.newName && $scope.file.newName!=$scope.file.name){
                            state=true;
                        }
                    });
                    if(state){
                        state=undefined;
                        $scope.errors="文件夹名称已存在！";
                        return ;
                    }

                }
                $scope.file.name=$scope.file.newName;
            }else {
                $scope.rename();
            }

            //如果创建创建文件夹
            if($scope.file.isNew){
                fs.mkdirSync($scope.file.parent.path+"/"+$scope.file.name);
                $scope.file.path=$scope.file.parent.path+"/"+$scope.file.name;

            }
            var builder = new json2xml.Builder();  // JSON->xml
            var xml =  builder.buildObject( $scope.setting);


            fs.writeFile($scope.file.path+"/setting.xml", xml,function(err){
                if (err) {
                    dialogService.tip([{"message":"没有权限！"}],null,1000);
                    return;
                }
                //如果创建创建文件夹向上传递
                if($scope.file.isNew){
                    $scope.$emit('parentAdd', $scope.file);
                    dialogService.tip([{"message":"文件夹新建成功!"}],null,1000);
                    $scope.file={};
                }else {
                    dialogService.tip([{"message":"文件夹修改成功!"}],null,1000);
                }
            });
        };
    }
    
    //删除文件夹
    function deleteFolderRecursive(path) {
        var files = [];
        if( fs.existsSync(path) ) {
            files = fs.readdirSync(path);

            files.forEach(function(file,index){
                var curPath = path + "/" + file;
                if(fs.statSync(curPath).isDirectory()) { // recurse

                    deleteFolderRecursive(curPath);

                } else { // delete file
                    fs.unlinkSync(curPath);
                }
            });
            fs.rmdirSync(path);
        }

    };

    angular.module('app')
        .controller('CustomerController', ["$scope","$modal","dialogService",customerController]);
})();